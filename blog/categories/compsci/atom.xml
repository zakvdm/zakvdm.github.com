<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CompSci | zakvdm.org]]></title>
  <link href="http://zakvdm.org/blog/categories/compsci/atom.xml" rel="self"/>
  <link href="http://zakvdm.org/"/>
  <updated>2013-02-07T23:07:27+02:00</updated>
  <id>http://zakvdm.org/</id>
  <author>
    <name><![CDATA[Zak van der Merwe]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating random Strings in Scala]]></title>
    <link href="http://zakvdm.org/blog/2013/02/07/generating-random-strings-in-scala/"/>
    <updated>2013-02-07T21:20:00+02:00</updated>
    <id>http://zakvdm.org/blog/2013/02/07/generating-random-strings-in-scala</id>
    <content type="html"><![CDATA[<p>Hopefully this is just the first of many posts about Scala.</p>

<p><code>scala Generate a String with 5 random alphanumeric characters
Random.alphanumeric.take(5).mkString
</code></p>

<!-- continue -->


<p><code>Random.alphanumeric</code> produces a stream of type <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream"><code>Stream[Char]</code></a>. It's interesting that Streams are "immutable" even though they're lazy (elements are only evaluated when they are needed). This is because the "elements" of the stream are immutable (even though some haven't been realised yet). If we keep a reference to the stream, we can confirm that it always produces the same output.</p>

<p><code>scala Streams are immutable
val charStream = Random.alphanumeric
assert(charStream.take(100) == charStream.take(100))
</code>
The Stream stores computed values, so Streams can be used to memoize algorithms. This also means we have to be wary of the memory usage when consuming the Stream.</p>

<p>The scala doc for <code>Stream</code> has this neat (and rather mind-bending) example:
<code>scala
val fibs: Stream[BigInt] = BigInt(0) #:: BigInt(1) #:: fibs.zip(fibs.tail).map { n =&gt; n._1 + n._2 }
</code>
Once I wrapped my head around what <code>zip</code> does with Streams, I was still surprised by the way <code>map</code> is applied "just in time" to generate the next element of the tail. My functional programming chops are still not that juicy, but I get a sense of something quite powerful here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using your own domain with Google App Engine]]></title>
    <link href="http://zakvdm.org/blog/2012/08/30/using-your-own-domain-with-google-app-engine/"/>
    <updated>2012-08-30T11:52:00+02:00</updated>
    <id>http://zakvdm.org/blog/2012/08/30/using-your-own-domain-with-google-app-engine</id>
    <content type="html"><![CDATA[<p>I've just lost too many hours trying to get Infinite Loop to work from my own domain: http://infiniteloop.zakvdm.org</p>

<p>The secret is to follow the instructions on this page: https://developers.google.com/appengine/docs/domain</p>

<p><strong>BUT!</strong> When you get to the section on CNAME records, the instructions will tell you to create a CNAME record that points to "ghs.googlehosted.com". This is a lie! If you point to "ghs.google.com" instead, then things magically work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Coders at Work - Peter Seibel]]></title>
    <link href="http://zakvdm.org/blog/2010/05/11/coders-at-work-peter-seibel/"/>
    <updated>2010-05-11T20:25:03+02:00</updated>
    <id>http://zakvdm.org/blog/2010/05/11/coders-at-work-peter-seibel</id>
    <content type="html"><![CDATA[<p>I started this on a plane on a whim, never expecting to finish it (it's <em>long</em>). Yet I did finish it, and for the last month, it's been consistently the thing I want to read most when I crawl into bed. You could read 1 or 2 of the interviews in isolation and not lose that much. In fact, there's a lot of repitition: the same questions, similar answers, similar opinions. And yet, I'd say read it all, there is so much to be gleaned from the small differences of opinion, and there is an unquestionable common strand that ties the book together: a vision of what it is to be a programmer; a prediction for the future; a praise song for what's come before and a fondness for the discipline that sometimes was so infectious that I had to put the book down and go tap in some code of my own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Test Driven Development - Kent Beck]]></title>
    <link href="http://zakvdm.org/blog/2010/02/22/test-driven-development-kent-beck/"/>
    <updated>2010-02-22T20:13:43+02:00</updated>
    <id>http://zakvdm.org/blog/2010/02/22/test-driven-development-kent-beck</id>
    <content type="html"><![CDATA[<p>I don't find much to recommend about this book. The second half is better, but the examples of the first half are simply not compelling. TDD has a place, and it's a tool I want to use, but this is not the book that will either convince or teach you about TDD.</p>
]]></content>
  </entry>
  
</feed>
